package views.paneles1;

import com.password4j.Hash;
import com.password4j.Password;
import dao.DAOAdministradoImplementacion;
import dao.DAORolesImplementacion;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import models.Administradores;
import models.Roles;

/**
 *
 * @author javeg
 */
public class Panel1 extends javax.swing.JPanel {

    String path2 = null;

    public Panel1(String correo) {
        initComponents();

        
        //cargarTablaAdmin();
        cargarTablaBien();
        cargarComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        miTablaAdmin = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        miComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        txtFoto = new javax.swing.JLabel();
        btnUpload = new javax.swing.JButton();
        btnInsertar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtNombre1 = new javax.swing.JTextField();
        btnModificar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        txtBuscarNombre = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(557, 580));
        setLayout(new java.awt.GridLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 153));

        miTablaAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        miTablaAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                miTablaAdminMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(miTablaAdmin);

        miComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Estado:");

        jLabel2.setText("Nombre:");

        txtId.setEditable(false);

        jLabel3.setText("Correo:");

        jLabel4.setText("Password:");

        txtFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtFoto.setPreferredSize(new java.awt.Dimension(100, 100));

        btnUpload.setText("upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        jLabel5.setText("id:");

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        txtBuscarNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarNombreKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(miComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(txtFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpload)
                            .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(56, 56, 56))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(miComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(btnUpload))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(btnInsertar)
                                .addGap(18, 18, 18)
                                .addComponent(btnModificar)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBorrar)
                            .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(61, 61, 61))
        );

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        JFileChooser chooser = new JFileChooser();
        String projectDir = System.getProperty("user.dir");// Obtiene el directorio del proyecto
        //dir C:\Users\javeg\Desktop\videosparaelproyecto\proyectodecrud\crud_dao_login3
        File srcDir = new File(projectDir, "src/main/resources");

        if (srcDir.exists()) {
            chooser.setCurrentDirectory(srcDir);
        } else {
            // Si no existe, usa el directorio home del usuario
            chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }

        // Abre el diálogo para seleccionar el archivo
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        if (f == null) {
            JOptionPane.showMessageDialog(this, "No se seleccionó ninguna imagen.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String path = f.getAbsolutePath();
        if (!path.toLowerCase().endsWith(".png") && !path.toLowerCase().endsWith(".jpg") && !path.toLowerCase().endsWith(".jpeg")) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo de imagen válido (PNG, JPG o jpeg).",
                    "Formato no válido", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            // Leer y redimensionar la imagen 
            BufferedImage bi = ImageIO.read(new File(path));
            Image img = bi.getScaledInstance(110, 157, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(img);
            this.txtFoto.setIcon(icon);

            String baseDir = System.getProperty("user.dir");
            Path pathAbsoluto = Paths.get(path);
            Path basePath = Paths.get(baseDir);
            Path rulaRelativa = basePath.relativize(pathAbsoluto);
            path2 = rulaRelativa.getFileName().toString();
        } catch (IOException ex) {
            Logger.getLogger(Panel1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        DAOAdministradoImplementacion dao_admin = new DAOAdministradoImplementacion();
        Administradores admin = new Administradores();
        int posicionSeleccionada = miComboBox.getSelectedIndex();
        // Mostrar la posición por pantalla
        System.out.println("Posición seleccionada: " + posicionSeleccionada);
        if (this.txtNombre1.getText().trim().isEmpty() || this.txtCorreo.getText().trim().isEmpty()
                || this.txtPassword.getText().trim().isEmpty() || posicionSeleccionada == 0) {
            JOptionPane.showMessageDialog(null, "faltan datos");
            return;
        }
        String nombre = this.txtNombre1.getText().trim();
        String correo = this.txtCorreo.getText().trim();
        String password = this.txtPassword.getText().trim();

        // Encriptar la contraseña
        String hashedPassword = encryptPassword(password);
        if (!validarCorreo(correo)) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un correo válido.", "Correo inválido", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Asignar valores al objeto empleado
        admin.setNombre(nombre);
        admin.setCorreo(correo);
        admin.setPassword(hashedPassword);
        admin.setRoles_id_rol(posicionSeleccionada);
        admin.setFoto_administrador(path2);

        try {
            // Registrar empleado en la base de datos
            boolean exito = dao_admin.insertar(admin);
            if (exito) {
                cargarTablaBien();
                limpiarCampos();
                JOptionPane.showMessageDialog(this, "Administrador registrado exitosamente.");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo registrar el administrador. Verifique los datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al insertar en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnInsertarActionPerformed


    private void miTablaAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miTablaAdminMouseClicked
        if (evt.getClickCount() == 1) {
            // Obtiene la referencia a la tabla
            JTable receptor = (JTable) evt.getSource();
            // Recupera los valores de las celdas seleccionadas y los asigna a los campos de texto
            this.txtId.setText(receptor.getModel().getValueAt(receptor.getSelectedRow(), 0).toString());
            this.txtNombre1.setText(receptor.getModel().getValueAt(receptor.getSelectedRow(), 1).toString());
            this.txtCorreo.setText(receptor.getModel().getValueAt(receptor.getSelectedRow(), 2).toString());
            this.txtPassword.setText(receptor.getModel().getValueAt(receptor.getSelectedRow(), 3).toString());
            // Recupera el valor correspondiente para el combo box
            String valorComboBox = receptor.getModel().getValueAt(receptor.getSelectedRow(), 4).toString();
            // Selecciona el valor en el combo box       
            this.miComboBox.setSelectedItem(valorComboBox);

            Object valorImagen = receptor.getModel().getValueAt(receptor.getSelectedRow(), 5);
            if (valorImagen instanceof ImageIcon) {
                ImageIcon originalIcon = (ImageIcon) valorImagen;
                System.out.println("mi tabla " + originalIcon.getDescription());
                String rutaImagen = originalIcon.getDescription();

                if (rutaImagen != null && !rutaImagen.isEmpty()) {
                    cargarImagen(txtFoto, rutaImagen, 110, 157);
                    System.err.println("Imagen original cargada: " + rutaImagen);
                    path2 = rutaImagen;
                } else {
                    this.txtFoto.setIcon(null);
                    System.err.println("No se encontró imagen original, se dejó vacío.");
                }
            } else {
                this.txtFoto.setIcon(null);
                System.err.println("La celda de la tabla no contenía una imagen válida.");
            }
        }
    }//GEN-LAST:event_miTablaAdminMouseClicked


    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        DAOAdministradoImplementacion dao_admin = new DAOAdministradoImplementacion();
        Administradores admin = new Administradores();
        if (this.txtNombre1.getText().trim().isEmpty()
                || this.txtCorreo.getText().trim().isEmpty()
                || this.txtPassword.getText().trim().isEmpty()
                || this.miComboBox.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.");
            return;
        }
        String correo = this.txtCorreo.getText().trim();
        String password = this.txtPassword.getText().trim();
        String hashedPassword = encryptPassword(password);// Encriptar la contraseña

        if (!validarCorreo(correo)) {
            JOptionPane.showMessageDialog(null, "El correo ingresado no es válido.");
            return;
        }
        int id;
        try {
            id = Integer.parseInt(txtId.getText().trim());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "El ID debe ser un número válido.");
            return;
        }

        admin.setId_administradores(id);
        admin.setNombre(this.txtNombre1.getText().trim());
        admin.setCorreo(correo);
        admin.setPassword(hashedPassword);
        admin.setRoles_id_rol(this.miComboBox.getSelectedIndex());

        if (path2 == null || path2.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna imagen.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            admin.setFoto_administrador(path2);
        }

        try {
            dao_admin.modificar(admin);
            cargarTablaBien();
            limpiarCampos();
            path2 = null;
            JOptionPane.showMessageDialog(null, "Registro modificado correctamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al modificar el registro: " + e.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Encapsulación en el DAO: Delegas la operación de eliminación al DAO,
     * manteniendo la lógica de la base de datos separada de la interfaz
     * gráfica.
     *
     * @param evt
     */
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        DAOAdministradoImplementacion dao_admin = new DAOAdministradoImplementacion();
        Administradores admin = new Administradores();
        try {
            int id = obtenerIdDesdeCampo();
            admin.setId_administradores(id);
            // Eliminar el empleado usando el DAO
            boolean eliminado = dao_admin.eliminar(admin);
            if (eliminado) {
                cargarTablaBien();
                limpiarCampos();
                JOptionPane.showMessageDialog(null, "Registro eliminado correctamente.");
            } else {
                JOptionPane.showMessageDialog(this, "El registro no fue encontrado o no se pudo eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException e) {
            // Manejar errores al convertir el ID a entero
            JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Capturar cualquier otro error inesperado
            JOptionPane.showMessageDialog(this, "Ocurrió un error al eliminar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed


    private void txtBuscarNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarNombreKeyReleased
        String nombre = txtBuscarNombre.getText().trim(); // Captura el texto ingresado
        if (nombre.isEmpty()) {
            cargarTablaBien();
            // Si el campo está vacío, puedes limpiar la tabla o mostrar todos los registros
            return;
        }
        try {
            DAOAdministradoImplementacion daoAdmin = new DAOAdministradoImplementacion();
            List<Administradores> lista = daoAdmin.buscarPorNombre(nombre);

            if (lista.isEmpty()) {
                actualizarTabla(new ArrayList<>());
            } else {
                // Actualiza la tabla con los resultados
                actualizarTabla(lista);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtBuscarNombreKeyReleased

    private void actualizarTabla(List<Administradores> lista) {
        DefaultTableModel modelo = (DefaultTableModel) miTablaAdmin.getModel();
        modelo.setRowCount(0); // Limpiar la tabla

        for (Administradores admin : lista) {
            System.out.println("Nombre de la imagen almacenada: " + admin.getFoto_administrador());
            ImageIcon icono = null;
            if (admin.getFoto_administrador() != null && !admin.getFoto_administrador().isEmpty()) {

                icono = cargarImagen1(admin.getFoto_administrador());
                // Obtener el nombre del rol
                String rolNombre = admin.getRoles() != null ? admin.getRoles().getNombre_rol() : "Desconocido";

                // Agregar datos a la fila de la tabla 
                modelo.addRow(new Object[]{
                    admin.getId_administradores(),
                    admin.getNombre(),
                    admin.getCorreo(),
                    admin.getPassword(),
                    rolNombre,
                    icono// Asegúrate de que tu tabla soporte renderizar imágenes 
                });
                if (icono != null) {
                    System.out.println("Descripción del icono después de añadirlo a la tabla: " + icono.getDescription());
                }
            }
            // Configurar el renderer para la columna de imágenes 
            miTablaAdmin.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    if (value instanceof ImageIcon) {
                        return new JLabel((ImageIcon) value);
                    } else {
                        return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    }
                }
            });
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> miComboBox;
    private javax.swing.JTable miTablaAdmin;
    private javax.swing.JTextField txtBuscarNombre;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JLabel txtFoto;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre1;
    private javax.swing.JTextField txtPassword;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaAdmin() {
        // Definir encabezados de la tabla
        final String[] COLUMNAS = {"id", "nombre", "correo", "password", "roles_id_rol", "foto_administrador"};
        DefaultTableModel modelo = new DefaultTableModel(COLUMNAS, 0);
        try {
            // Obtener la lista de empleados desde la base de datos
            DAOAdministradoImplementacion dao_admin = new DAOAdministradoImplementacion();
            List<Administradores> adminList = dao_admin.listar();
            for (Administradores dato : adminList) {
                List<Object> fila = new ArrayList<>();
                fila.add(dato.getId_administradores());
                fila.add(dato.getNombre());
                fila.add(dato.getCorreo());
                fila.add(dato.getPassword());
                fila.add(dato.getRoles_id_rol());
                fila.add(dato.getFoto_administrador());
                modelo.addRow(fila.toArray());
            }
            this.miTablaAdmin.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los administradores: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarTablaBien() {
        final String[] COLUMNAS = {"id", "nombre", "correo", "password", "estado", "foto"};
        DefaultTableModel modelo = new DefaultTableModel(COLUMNAS, 0);
        try {
            DAOAdministradoImplementacion dao_admin = new DAOAdministradoImplementacion();
            List<Administradores> adminList = dao_admin.listarCompleto();
            for (Administradores dato : adminList) {
                List<Object> fila = new ArrayList<>();
                fila.add(dato.getId_administradores());
                fila.add(dato.getNombre());
                fila.add(dato.getCorreo());
                fila.add(dato.getPassword());
                fila.add(dato.getRoles() != null ? dato.getRoles().getNombre_rol() : "Sin roles");

                String nombreImagen = dato.getFoto_administrador();
                ImageIcon icon = null;

                try {
                    // Intentar cargar la imagen del administrador
                    String rutaImagen = nombreImagen;
                    URL imageUrl = getClass().getClassLoader().getResource(rutaImagen);
                    if (imageUrl != null) {
                        icon = new ImageIcon(imageUrl);
                        icon.setDescription(rutaImagen);
                       // System.out.println("Imagen cargada: " + rutaImagen);
                    } else {
                        // Si la imagen no existe, usar la imagen por defecto
                        URL defaultImageUrl = getClass().getClassLoader().getResource("default.jpg");
                        if (defaultImageUrl != null) {
                            icon = new ImageIcon(defaultImageUrl);
                            icon.setDescription("default.jpg");
                            System.out.println("Imagen por defecto cargada");
                        }
                    }
                } catch (Exception ex) {
                    System.err.println("Error al cargar la imagen: " + ex.getMessage());
                }

                if (icon != null) {
                    Image img = icon.getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH);
                    ImageIcon finalIcon = new ImageIcon(img);
                    finalIcon.setDescription(icon.getDescription());
                    fila.add(finalIcon);
                } else {
                    fila.add(null); // Sin imagen
                }
                modelo.addRow(fila.toArray());
            }
            miTablaAdmin.setRowHeight(40);
            this.miTablaAdmin.setModel(modelo);
            asignarRenderizadorDeImagen();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los administradores: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void asignarRenderizadorDeImagen() {

        miTablaAdmin.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof ImageIcon) {
                    return new JLabel((ImageIcon) value);
                } else {
                    return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                }
            }
        });
    }

    private void cargarComboBox() {
        List<Roles> roleList;
        // Obtener la lista de roles desde la base de datos
        DAORolesImplementacion roleDao = new DAORolesImplementacion();

        try {
            roleList = roleDao.listar();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al cargar los roles: " + ex.getMessage());
            return;
        }
        // Verificar si la lista está vacía
        if (roleList == null || roleList.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se encontraron roles para cargar.");
            return;
        }

        // Limpiar el ComboBox antes de agregar nuevos datos 
        this.miComboBox.removeAllItems();
        miComboBox.addItem("Seleccione un rol");
        // Agregar los nombres de los roles al ComboBox
        for (Roles role : roleList) {
            // String item = role.getId_rol() + " - " + role.getNombre_rol();
            String item = role.getNombre_rol();
            this.miComboBox.addItem(item);
        }
    }

    private boolean validarCorreo(String correo) {
        String regex = "^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$";
        //si es correcto devuelve true
        return correo.trim().matches(regex);
    }

    private void limpiarCampos() {
        this.txtId.setText("");        // Limpia el campo de nombre
        this.txtNombre1.setText("");
        this.txtCorreo.setText("");        // Limpia el campo de correo
        this.txtPassword.setText("");      // Limpia el campo de contraseña
        this.miComboBox.setSelectedIndex(0); // Restablece la selección del combo box       
        this.txtBuscarNombre.setText("");
       
        try {
            cargarImagen(this.txtFoto, "fondo.jpg", 110, 157);
        } catch (NullPointerException e) {
            System.err.println("Imagen por defecto no encontrada");
            this.txtFoto.setIcon(null);
        }
        this.path2 = null;
        this.txtFoto.repaint();
    }

    private String encryptPassword(String password) {
        Hash hash = Password.hash(password).addRandomSalt().withArgon2();
        return hash.getResult();
    }

// Método auxiliar para validar y obtener el ID
    private int obtenerIdDesdeCampo() {
        String idTxt = this.txtId.getText().trim();
        if (idTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return Integer.parseInt(idTxt);// Puede lanzar NumberFormatException

    }

    // Método para cargar una imagen en un JLabel
    private void cargarImagen(JLabel label, String ruta, int ancho, int alto) {
        try {
            // Acceder a los recursos con ClassLoader y obtener la URL de la imagen
            URL imageUrl = getClass().getClassLoader().getResource(ruta);  // Usamos ruta relativa sin 'src/main/resources'

            if (imageUrl != null) {
                // Si la imagen es encontrada, cargamos y escalamos la imagen
                ImageIcon icon = new ImageIcon(imageUrl);
                Image img = icon.getImage().getScaledInstance(ancho, alto, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(img);
                label.setIcon(scaledIcon);
            } else {
                // Si no se encuentra la imagen, mostramos un mensaje de error
                System.err.println("No se encontró el archivo en la ruta: " + ruta);
                label.setIcon(null);  // En caso de error, limpiamos el icono
            }
        } catch (Exception e) {
            // Capturamos cualquier excepción y mostramos el mensaje
            System.err.println("Error al cargar la imagen: " + e.getMessage());
            label.setIcon(null);  // En caso de error, limpiamos el icono
        }
    }

    private ImageIcon cargarImagen1(String rutaRelativa) {
        ImageIcon icono = null;

        // Si la ruta de la imagen no es nula ni vacía
        if (rutaRelativa != null && !rutaRelativa.isEmpty()) {
            URL imageUrl = getClass().getClassLoader().getResource(rutaRelativa);

            // Si se encuentra la imagen
            if (imageUrl != null) {
                icono = new ImageIcon(new ImageIcon(imageUrl).getImage().getScaledInstance(35, 35, Image.SCALE_SMOOTH));
                icono.setDescription(rutaRelativa);
                System.out.println("Imagen cargada desde el recurso: " + imageUrl);
            } else {
                // Si no se encuentra la imagen, usar imagen por defecto
                System.out.println("La imagen no existe en los recursos: " + rutaRelativa);
                icono = new ImageIcon(getClass().getClassLoader().getResource("default.jpg"));
                icono.setDescription("default.jpg");
            }
        } else {
            // Si no hay imagen almacenada, usar imagen por defecto
            System.out.println("No hay imagen almacenada para este administrador.");
            icono = new ImageIcon(getClass().getClassLoader().getResource("default.jpg"));
            icono.setDescription("default.jpg");
        }

        return icono;
    }

    private void actualizarDatos() {
        try {
            int id = Integer.parseInt(txtId.getText());
            String nombre = txtNombre1.getText();
            String correo = txtCorreo.getText();
            String password = txtPassword.getText();
            String rolNombre = miComboBox.getSelectedItem().toString();
            String rutaImangen = txtFoto.getText();

            if (rutaImangen == null || rutaImangen.isEmpty()) {
                Object valorImagen = miTablaAdmin.getModel().getValueAt(miTablaAdmin.getSelectedRow(), 5);
                if (valorImagen instanceof ImageIcon) {
                    rutaImangen = ((ImageIcon) valorImagen).getDescription();
                    System.out.println("Ruta imagen existente " + rutaImangen);
                }
            } else {
                System.out.println("Ruta imagen nueva o mantenida " + rutaImangen);
            }
            cargarTablaBien();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar los datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
